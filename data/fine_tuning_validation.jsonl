{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2025-01-27T06:23:07.000Z] [shiv810]:\nImprove the tool calling approach by:\n\n1. Switching to the `gpt4o` model for better performance on complex queries.\n2. Using Few-Shot Examples (dynamic or static) with semantically similar examples to guide the model, improving accuracy by providing relevant context. Dynamic examples can adapt to user input for more precise responses. The plugins call examples would be semantically similar to input query to the command router.\n\n### Issue Details\nRepository: ubiquity-os/ubiquity-os-kernel\nIssue Number: #242\nTime to Complete: Not completed\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <1 Day"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2024-12-12T16:16:54.000Z] [0x4007]:\nThis is bad because I have to go back in and manually re-add all the pricing. \r\n\r\n\r\nExample: \r\n- https://github.com/ubiquity-os-marketplace/.ubiquity-os/commit/3635c013b31f35975dffa370369de72d52d2da0b\r\n- causes https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#event-15637253843\r\n\r\nThis isn't the first time this happened either, with other \"normal\" priority levels. \r\n\r\nAfter a quick look at our https://github.com/orgs/ubiquity/projects/27 I noticed it only seems to do it inside of the @ubiquity-os-marketplace organization. The other two organizations were not affected, even after doing the same config changes.\r\n\r\nDue to exceeded rate limits, it is possible that this failed halfway through the process. \r\n\r\n![telegram-cloud-photo-size-5-6258183812232101774-y](https://github.com/user-attachments/assets/9b699790-81bd-4a2f-9ade-f36e54fe62db)\r\n\r\n\r\nAs of this moment I won't fix the price labels but in case they are left as is, these can be useful to review for reference for not being affected:\r\n\r\n<img width=\"647\" alt=\"image\" src=\"https://github.com/user-attachments/assets/66407641-7a6b-4877-b10b-df42c62821d1\" />\r\n\r\n###### https://devpool.directory/ubiquity-os-marketplace\r\n\r\n\r\n<img width=\"656\" alt=\"image\" src=\"https://github.com/user-attachments/assets/77cfb43d-515d-4d57-b487-48e85e9523fb\" />\r\n\r\n###### https://devpool.directory/ubiquity-os-marketplace?proposal=true\r\n\r\n\n\n### Issue Details\nRepository: ubiquity-os-marketplace/daemon-pricing\nIssue Number: #64\nTime to Complete: Not completed\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <1 Hour"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2024-09-14T09:28:03.000Z] [0x4007]:\nhttps://github.com/ubiquibot/assistive-pricing/blob/2fd11e285c61148c01eaa934faf59b247ffe6d34/src/shared/label.ts#L5\r\n\r\n\r\n- I noticed that many price labels are being set to the `default` color. Fix this to be the correct `price` color.\r\n- Make sure to change the color of incorrect price labels as well. \r\n\n\n### Issue Details\nRepository: ubiquity-os-marketplace/daemon-pricing\nIssue Number: #33\nTime to Complete: 0 hours\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <2 Hours"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2024-10-17T17:58:58.000Z] [0x4007]:\nRight now its messy that every plugin posts their own comments. It allows for flexibility but I think its a bad idea for it to be the main way. \n.\nI propose we have a method that lets the developer pass in the comment data and the kernel posts the comment on behalf of the plugin. \n.\nThe important part is that the comment has special metadata, a run ID, that includes the Cloudflare KV run UUID.  \n.\nAnd when other plugins in the chain want to leave a comment, it appends in its own divided section (using the plugin ID) \nThe kernel can have a custom parser that can manipulate the comment per plugin section (or \"field\") with the help of the metadata. \n.\nThe plugin developers are abstracted away from these low level details, and instead just have to worry about passing strings to the kernel to do the heavy lifting with. \n.\nThe primary method should have appending behavior, but we should also support clobbering (replacing the comment content, limited to only the section/field controlled by the plugin)\n.\nA simplified example of a section separator:\n```\n<!-- uuid@plugin name -->\n```\n```\n<!-- abcdef123456@ubiquity-os-marketplace/text-conversation-rewards -->\n```\nThe parser can identify section separators with a regex and parse out each plugin's output.\n\n### Issue Details\nRepository: ubiquity-os/ubiquity-os-kernel\nIssue Number: #154\nTime to Complete: Not completed\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <1 Day"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2024-09-06T08:38:59.000Z] [0x4007]:\nI know I've highlighted this issue in the past, but I'm not sure where. \n\nAs I'm going around these conferences and trying to fundraisers/find partners we realize that to quickly set up partners, we basically just send them the ubiquibot config file. \n\nSo the encrypted private key was leaked unintentionally. \n\nAs part of the decryption process, we should also include the organization ID or repo ID as part of the salt. \n\nThat way, if I copy my ubiquibot config in my organization and I leak it, and somebody else tries to use my same exact EVM private key encrypted the bot, it will fail to decrypt correctly because their repository ID is different for example.\n\n### Issue Details\nRepository: ubiquity-os/ubiquity-os-kernel\nIssue Number: #104\nTime to Complete: 263 hours\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <4 Hours"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2024-10-10T15:39:19.000Z] [0x4007]:\n- When aggregating rewards, collect every link into a single data store and only credit the first instance of a link. \r\n- In the following issue specification, I got way too much in rewards which can be solved by checking the redundant link (the only difference is the hash, which shouldn't count) I should have only received credit for basically one link. \r\n- https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/143\r\n\r\n###### Similar [^01^]\r\n\r\n[^01^]: [Missing defaults for html tags](https://www.github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/153) 76%\n\n### Issue Details\nRepository: ubiquity-os-marketplace/text-conversation-rewards\nIssue Number: #155\nTime to Complete: 1121 hours\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <1 Hour"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2025-02-21T15:41:32.000Z] [rndquu]:\nDepends on https://github.com/ubiquity-os/ubiquity-os-plugin-installer/pull/28\n\nRight now when partner generates a config from a template minimal and full configs are fetched this way:\n1. Minimal is [read](https://github.com/ubq-testing/ubiquity-os-plugin-installer/blob/0225e80e682eb76cf58cd85c565f222b79d03842/static/minimal-predefined.json) from json\n2. Full is [loaded](https://github.com/ubq-testing/ubiquity-os-plugin-installer/blob/0225e80e682eb76cf58cd85c565f222b79d03842/static/scripts/predefined-configs/template-handler.ts#L91) from another repo\n\nWe should somehow dynamically derive a config either from the plugin's [manifest.json](https://github.com/ubiquity-os-marketplace/command-start-stop/blob/111e17ddfc94eb3098f7d4de4946fd77875ef33f/manifest.json) either from [plugin-input.ts](https://github.com/ubiquity-os-marketplace/command-start-stop/blob/111e17ddfc94eb3098f7d4de4946fd77875ef33f/src/types/plugin-input.ts). \n\n_Originally posted by @rndquu in https://github.com/ubiquity-os/ubiquity-os-plugin-installer/pull/28#pullrequestreview-2633434783_\n            \n\n### Issue Details\nRepository: ubiquity-os/ubiquity-os-plugin-installer\nIssue Number: #41\nTime to Complete: Not completed\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <2 Hours"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2025-02-14T03:07:26.000Z] [shiv810]:\nBuild a scraper that creates a JSONL compatible dataset, following OpenAI's spec for the fine-tune dataset[^1^], to be used with their framework.\n\nWe need close to 250 to 300 well annotated and clean examples, for the training set.    And a separate validation set which should have another 100 to 150 examples.\n\n\n[^1^]: https://platform.openai.com/docs/guides/fine-tuning#example-format\n\n\n\n\n\n\n\n### Issue Details\nRepository: ubiquity-os-marketplace/daemon-pricing\nIssue Number: #82\nTime to Complete: Not completed\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <1 Day"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2024-03-10T21:35:54.000Z] [whilefoo]:\nWe need to fix a Typescript [issue](https://github.com/ubiquity/ubiquibot-kernel/blob/c000369cb11cdcf67e1ac6678df403149e699f43/src/github/handlers/repository-dispatch.ts#L52): `Expression produces a union type that is too complex to represent.`\r\nI've tried multiple things:\r\n\r\n- function only accepting context of certain events\r\n```js\r\nexport async function getDefaultBranch(context: GitHubContext<\"repository_dispatch\">, owner: string, repository: string)\r\n```\r\n\r\n- making the function generic\r\n```js\r\nexport async function getDefaultBranch<T extends EmitterWebhookEventName>(context: GitHubContext<T>, owner: string, repository: string)\r\n```\r\n\r\n- casting a Context<\"repository_dispatch\"> to Context<T> - it seems to work in my IDE but fails in CI but it's also a real solution\r\n```js\r\nconst defaultBranch = await getDefaultBranch(context as GitHubContext, nextPlugin.plugin.owner, nextPlugin.plugin.repo);\r\n```\r\n\r\n---\r\n\r\nI've also got this problem when developing [assistive-pricing](https://github.com/ubiquibot/assistive-pricing) plugin. I was trying to create typeguards like this:\r\n```js\r\nexport function isIssueCommentCreatedEvent(context: Context): context is Context<\"issue_comment.created\"> {\r\n  return context.eventName === \"issue_comment.created\";\r\n}\r\n```\r\n`context is Context<\"issue_comment.created\">` triggers the error\n\n### Issue Details\nRepository: ubiquity-os/ubiquity-os-kernel\nIssue Number: #31\nTime to Complete: 2229 hours\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <2 Hours"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2024-09-12T08:41:31.000Z] [0x4007]:\nIt appears as though the software checks for the metadata from the /start comment. \n\nThis is incorrect because there are various ways to assign people without that command.\n\nCheck the timeline for assign events and target this timestamp. \n\nThe correct logic can be lifted from bot v1. \n\nExample of it not working as expected: https://github.com/ubiquibot/conversation-rewards/issues/92\n\n### Issue Details\nRepository: ubiquity-os-marketplace/daemon-disqualifier\nIssue Number: #19\nTime to Complete: 9 hours\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <1 Hour"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2025-01-23T19:09:27.000Z] [shiv810]:\n> ```\n> \n> <!-- UbiquityOS - createActionsPlugin - efc76ae24d3d81cca96498fb42a71cf6cf5ecb49 - @0x4007 - https://github.com/ubiquity-os-marketplace/text-vector-embeddings/actions/runs/12935959477\n> {\n>   \"stack\": \"TypeError: Cannot read properties of null (reading 'node')\\n    at /home/runner/work/text-vector-embeddings/text-vector-embeddings/dist/index.js:3:887347\\n    at Array.forEach (&lt;anonymous&gt;)\\n    at issueMatching (/home/runner/work/text-vector-embeddings/text-vector-embeddings/dist/index.js:3:887276)\\n    at async runPlugin (/home/runner/work/text-vector-embeddings/text-vector-embeddings/dist/index.js:3:894026)\\n    at async createActionsPlugin (/home/runner/work/text-vector-embeddings/text-vector-embeddings/dist/index.js:3:747275)\",\n>   \"caller\": \"createActionsPlugin\"\n> }\n> -->\n> \n> ```\n> \n> @shiv810  again here\n>  \n\n _Originally posted by @0x4007 in [#247](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/247#issuecomment-2610775622)_\n\n### Issue Details\nRepository: ubiquity-os-marketplace/text-vector-embeddings\nIssue Number: #72\nTime to Complete: 147 hours\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <1 Hour"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2025-02-05T06:16:31.000Z] [0x4007]:\nBased on the conversation history, it appears that the manifest files aren't building on push, and this is a concern that needs to be addressed. The manifest should include:\n\n1. Command documentation\n2. Usage examples\n3. Command parameters and their descriptions\n\nThis is important because:\n1. The help menu needs to read from these compiled manifest files\n2. Users need to understand how to use the command and its parameters\n3. The manifest should explain any command arguments and their effects\n\n_Originally posted by @ubiquity-os-beta in https://github.com/ubiquity-os-marketplace/text-vector-embeddings/pull/70#issuecomment-2635781961_\n\n### Issue Details\nRepository: ubiquity-os-marketplace/text-vector-embeddings\nIssue Number: #77\nTime to Complete: 0 hours\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <15 Minutes"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2024-08-26T14:55:23.000Z] [gentlementlegen]:\nFor testing purposes and fine tuning, it would be handy to have a way to run the `conversation-rewards` manually against any pull-request within a sandbox to test and fine tune the incentives as desired.\r\n\r\nMy first thought would be to have a `/simulate-rewards issue_url` or some similar command that would generate the results within the issue / pr where it is run, without generating the permits, which would allow for testing and tuning without needed to open / close issues manually to trigger a run.\n\n### Issue Details\nRepository: ubiquity-os-marketplace/text-conversation-rewards\nIssue Number: #102\nTime to Complete: 2041 hours\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <1 Week"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2024-11-18T03:00:39.000Z] [0x4007]:\nWe don't reward assignees for their comments because it's too easy to game this. \n\nWe need to be more precise (right now we allow for rewards on the issue, just not on pull) and check the timestamp of the comments they made. \n\nThey should receive rewards for their comments while they are not the assignee, and should not receive rewards while they are the assignee. \n\nWe should cross reference the assignment events (and their associated unassigned events) and then measure every comment and determine whether it was while they are the assignee and while they are not. We should then credit accordingly. \n\nThis should support the edge case of being assigned and unassigned multiple times. \n\nI wonder if it makes sense to blanket and just check for the first assignment time and the last unassignment time and exclude rewarding comments from between. It would simplify logic and it may also prevent gamification. \n\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2481300459_\n\n### Issue Details\nRepository: ubiquity-os-marketplace/text-conversation-rewards\nIssue Number: #191\nTime to Complete: 355 hours\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <4 Hours"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2024-09-08T05:14:59.000Z] [0x4007]:\nWe need to allow partners to configure plugins with a simple UI. \n\n- The UI should allow for a query parameter to pass in a ubiquibot-config file URL\n- it should parse the config and render text boxes for all the properties of each plugin. These should be converted from camel case to normal case to appear more readable to a normal user. The `placeholder` (html input element placeholder) value should be the default value. \n- it should allow for GitHub authentication, so when the form is submitted, it can commit the file to the repo.\n\nI am unsure if this should be inside of the kernel. \n\n### Issue Details\nRepository: ubiquity-os/ubiquity-os-kernel\nIssue Number: #106\nTime to Complete: 758 hours\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <1 Week"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2024-12-04T08:05:24.000Z] [0x4007]:\nCool to see it always recommends at least one person but it is very much not relevant. \n\nWhats the timeline looking like to populate the database by scraping the existing closed issues and their assignees @sshivaditya2019? \n\n### repo/org/global Context Matching\n\nI think we should optimize our logic. Tasks that may look similar but posted in two different repositories may in reality be quite different. Normally I would prefer to matchmake against those who completed similar tasks within the same repository, but we can \"fallback\" to org context (try to matchmake against any repository's task in the org) and then a final \"fallback\" to global context. \n\nPerhaps the simplest way to calculate this could be to subtract relevance \"points\"\n\nExample:\n```\n0% adjustment: Same repository matching percentage \n-25% adjustment: Same organization\n-50%: Global\n```\n\nMeaning for an identical task posted in three different locations:\n```\nsame repo = 100% match\nsame org, different repo = 75% match\ndifferent org = 50% match\n```\n\nJust an idea but open to discussing to make this more accurate and simple to implement. \n\n### Recent Code Changes Fallback\n\nAnother idea to always try and match somebody is to check how much of the codebase was authored by whom. If nobody hits a relevance of greater than 25% we can fallback to assigning whoever wrote most of the code in the repository. Surely we can find the stats somewhere. \n\n### Future Considerations\n\nBecause we want the system to always be assigning the right contributor at the right time in the future, we should consider the output of the `/start` command as well, with all its checks. If UbiquityOS is able to run `/start` on behalf of others this can solve most of the problems I can think of. \n\nSpecifically, imagine the scenario where the same top contributor is always recommended to work on the newly posted tasks. [^05^] [^04^] [^03^] [^01^] With a concurrent task limit of 2, they will quickly be saturated with work. We should be able to detect this and fallback/recommend/assign the next best. \n\n### Original Context\n\n>[!NOTE]\n>The following contributors may be suitable for this task:\n>### [gentlementlegen](https://www.github.com/gentlementlegen)\n> `1% Match` [ubiquity-os/ubiquity-os-kernel#125](https://www.github.com/ubiquity-os/ubiquity-os-kernel/issues/125)\n\n---\n\n\n_Originally posted by @ubiquity-os-beta[bot] in https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/57#issuecomment-2516462610_ [^02^]\n            \n\n[^01^]: ⚠ 75% possible duplicate - [0% match](https://www.github.com/ubiquity-os-marketplace/text-vector-embeddings/issues/63#63)\n\n[^02^]: ⚠ 75% possible duplicate - [Double Task Recommendation](https://www.github.com/ubiquity-os-marketplace/text-vector-embeddings/issues/82#82)\n\n[^03^]: ⚠ 75% possible duplicate - [Talent Recommendation data](https://www.github.com/ubiquity-os-marketplace/text-vector-embeddings/issues/75#75)\n\n[^04^]: ⚠ 76% possible duplicate - [Always Recommend Talent](https://www.github.com/ubiquity-os-marketplace/text-vector-embeddings/issues/45#45)\n\n[^05^]: ⚠ 85% possible duplicate - [Task Matchmaking](https://www.github.com/ubiquity-os-marketplace/text-vector-embeddings/issues/7#7)\n\n\n\n### Issue Details\nRepository: ubiquity-os-marketplace/text-vector-embeddings\nIssue Number: #55\nTime to Complete: Not completed\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <4 Hours"}]}
{"messages":[{"role":"system","content":"Given the issue content and actual completion time, assign the most appropriate Time Label.\nConsider the task complexity and actual completion time to select from the available time labels.\nEnsure your selection reflects the real time investment needed for the task."},{"role":"user","content":"### Issue Description\n[2025-02-05T23:47:07.000Z] [gentlementlegen]:\n> There should be a warning for capped rewards which is not present here. [^05^] [^04^] [^02^] [^01^] @gentlementlegen rfc \n> \n> ![image](https://github.com/user-attachments/assets/ed0dacbe-c76a-4c6c-b1a8-6736cb5e491a) \n\n _Originally posted by @0x4007 in [#60](https://github.com/ubiquity-os-marketplace/command-ask/issues/60#issuecomment-2636432363)_ [^03^]\n\n[^01^]: ⚠ 73% possible duplicate - [Do not render results for a user that did not provide its wallet](https://www.github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/219#219)\n\n[^02^]: ⚠ 75% possible duplicate - [Reward Limits](https://www.github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/166#166)\n\n[^03^]: ⚠ 75% possible duplicate - [Display for final rewards in GitHub comment should not display the URL and should display all the contributor's rewards](https://www.github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/164#164)\n\n[^04^]: ⚠ 76% possible duplicate - [Cap the specification to the reward label](https://www.github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/246#246)\n\n[^05^]: ⚠ 82% possible duplicate - [Display warning message on rewards capped](https://www.github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/205#205)\n\n\n\n### Issue Details\nRepository: ubiquity-os-marketplace/text-conversation-rewards\nIssue Number: #263\nTime to Complete: Not completed\n\n### Valid Time Labels\nTime: <15 Minutes\nTime: <1 Day\nTime: <1 Week\nTime: <1 Month\nTime: <1 Hour\nTime: <2 Hours\nTime: <4 Hours"},{"role":"assistant","content":"Time: <15 Minutes"}]}